name: CI

on:
  push:
    branches-ignore: ["claude/**", "dependabot/**"]
  pull_request_target:
    branches: ["**"]
  workflow_dispatch: {}

permissions: write-all

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Quality Checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # TODO: re-enable
      # - name: Run lint
      #   run: npm run lint

      # - name: Run build
      #   run: npm run build

  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests

    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x, 22.x, 24.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: false

  create-issues:
    runs-on: ubuntu-latest
    name: Create Issues
    needs: [quality-checks, unit-tests]
    if: |
      failure() &&
      github.ref == 'refs/heads/procfiled'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'Quality Checks', result: '${{ needs.quality-checks.result }}' },
              { name: 'Unit Tests', result: '${{ needs.unit-tests.result }}' }
            ];

            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI Failure on default branch (${context.sha.substring(0, 7)})`,
              body: `## 🚨 CI Failure on default Branch

            **Commit:** ${context.sha.substring(0, 7)}
            **Workflow:** [${context.workflow}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            **Time:** ${new Date().toISOString()}

            ### Job Status:
            ${jobs.map(job => {
              const icon = job.result === 'success' ? '✅' : '❌';
              return `- ${icon} ${job.name}`;
            }).join('\n')}

            ### Next Steps:
            1. Review the [failed workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. Check the logs for specific error details
            3. Fix the failing tests or publishing issues
            4. Close this issue once resolved

            *This issue was automatically created by GitHub Actions.*`,
              labels: ['bug', 'ci-failure', 'default-branch']
            });

            // Add a comment with investigation details using specific token
            const response = await fetch(`https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/issues/${issue.data.number}/comments`, {
              method: 'POST',
              headers: {
                'Authorization': 'Bearer ${{ secrets.COMMENT_BOT_TOKEN }}',
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                body: '@claude Please investigate this CI failure.\n\n_(NOTE: this comment was automatically added by CI)_'
              })
            });

            if (!response.ok) {
              throw new Error(`Failed to create comment: ${response.status} ${response.statusText}`);
            }

  prerelease:
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests]
    name: Pre-release to NPM
    if: |
      success() &&
      github.ref == 'refs/heads/profiled' &&
      github.event_name != 'pull_request_target' &&
      !contains(github.event.head_commit.message, '[skip-prerelease]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Generate pre-release version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA:0:7}
          PRERELEASE_VERSION="${CURRENT_VERSION}-beta.${TIMESTAMP}.${SHORT_SHA}"
          echo "version=${PRERELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "current=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version

      - name: Publish pre-release to NPM
        run: npm publish --tag beta
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create pre-release summary
        run: |
          echo "## 🚀 Pre-release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** procfiled" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** beta" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Install the pre-release version:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install procfiled@beta" >> $GITHUB_STEP_SUMMARY
          echo "# or specific version:" >> $GITHUB_STEP_SUMMARY
          echo "npm install procfiled@${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Add \`[skip-prerelease]\` to commit message to skip pre-release publishing." >> $GITHUB_STEP_SUMMARY
